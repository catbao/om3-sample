import TrendTree from "../helper/tend-query-tree";
export default class MinHeap<TrendTree> {  
    private heap: TrendTree[] = []; 
    // private w = [
    //     0.4,0.4,0.4,0.4,0.4,0.4,0.4,0.4,0.4,0.4,0.4,0.4,0.4,0.4,0.4,0.4,0.4,0.4,0.4,0.4,0.4,0.4,0.4,0.4,0.4,0.4,0.4,0.4,0.4,0.4,0.4,0.4,0.4,0.4,0.4,0.4,0.4,0.4,0.4,0.4,    
    //         0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,
    //         1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,
    //         1.3,1,3,1,3,1.3,1.3,1.3,1,3,1,3,1.3,1.3,1.3,1,3,1,3,1.3,1.3,1.3,1,3,1,3,1.3,1.3,1.3,1,3,1,3,1.3,1.3,1.3,1,3,1,3,1.3,1.3,1.3,1,3,1,3,1.3,1.3,1.3,1,3,1,3,1.3,1.3,
    //         1.6,1.6,1.6,1.6,1.6,1.6,1.6,1.6,1.6,1.6,1.6,1.6,1.6,1.6,1.6,1.6,1.6,1.6,1.6,1.6,1.6,1.6,1.6,1.6,1.6,1.6,1.6,1.6,1.6,1.6,1.6,1.6,1.6,1.6,1.6,1.6,1.6,1.6,1.6,1.6
    //     ] 
    // private w = [0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,
    //     0.2,0.2,0.2,0.2,0.2,0.2,0.2,0.2,0.2,0.2,0.2,0.2,0.2,0.2,0.2,0.2,0.2,0.2,0.2,0.2,0.2,0.2,0.2,0.2,0.2,0.2,0.2,0.2,0.2,0.2,0.2,0.2,0.2,0.2,0.2,0.2,0.2,0.2,0.2,0.2,
    //     0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,
    //     0.4,0.4,0.4,0.4,0.4,0.4,0.4,0.4,0.4,0.4,0.4,0.4,0.4,0.4,0.4,0.4,0.4,0.4,0.4,0.4,0.4,0.4,0.4,0.4,0.4,0.4,0.4,0.4,0.4,0.4,0.4,0.4,0.4,0.4,0.4,0.4,0.4,0.4,0.4,0.4,
    //     0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5
    // ] 
    private w = [0.77, 1.43, 1.51, 0.27, 0.58, 0.36, 1.65, 1.17, 0.25, 0.35, 0.84, 0.88, 1.65, 1.35, 0.64, 1.15, 0.34, 1.8, 1.79, 0.06, 1.42, 0.21, 1.35, 0.5, 1.33, 0.03, 1.83, 1.74, 0.93, 0.16, 0.67, 1.57, 1.63, 1.95, 0.59, 1.51, 1.09, 0.66, 1.4, 1.93, 0.7, 0.63, 0.37, 1.91, 0.3, 0.22, 1.3, 0.29, 0.99, 0.07, 0.37, 0.16, 1.62, 0.26, 0.03, 0.39, 1.26, 0.07, 0.05, 1.8, 0.36, 0.85, 1.93, 0.21, 1.35, 1.69, 1.16, 1.14, 1.46, 1.68, 0.45, 1.13, 0.46, 0.04, 0.64, 0.67, 0.02, 1.83, 0.59, 0.49, 1.08, 1.82, 1.75, 1.54, 1.03, 0.89, 1.33, 0.17, 1.48, 1.17, 1.92, 1.31, 1.0, 1.06, 1.9, 0.95, 1.59, 1.29, 1.87, 1.11, 1.64, 1.33, 0.37, 0.02, 0.81, 0.53, 1.34, 1.4, 0.58, 0.3, 1.63, 0.32, 1.8, 1.01, 1.52, 0.2, 0.38, 0.03, 0.05, 1.14, 1.66, 0.13, 0.79, 1.23, 0.72, 1.21, 1.43, 1.61, 1.11, 0.22, 0.65, 0.52, 0.85, 1.94, 1.1, 0.76, 0.82, 0.51, 1.04, 0.33, 0.87, 0.86, 1.43, 1.21, 0.93, 1.86, 1.8, 0.36, 1.13, 0.29, 0.72, 0.1, 0.75, 0.73, 1.87, 0.93, 0.91, 0.26, 0.01, 1.97, 0.83, 0.08, 0.91, 0.32, 0.03, 1.55, 0.66, 1.06, 0.8, 1.54, 0.17, 1.98, 0.96, 0.13, 1.03, 0.08, 1.12, 0.6, 0.15, 0.73, 1.07, 0.17, 1.13, 1.99, 1.34, 0.97, 0.38, 1.68, 0.66, 1.67, 0.24, 1.7, 1.09, 1.35, 1.86, 0.9, 0.22, 0.73, 1.94, 0.64];

    // 插入元素  
    push(element: TrendTree): void {  
        this.heap.push(element);  
        this.siftUp(this.heap.length - 1);  
    }  
  
    // 弹出最小元素  
    pop(): TrendTree | null {  
        if (this.heap.length === 0) {  
            return null;  
        }  
        if (this.heap.length === 1) {  
            return this.heap.pop()!;  
        }  
        const top = this.heap[0];  
        this.heap[0] = this.heap.pop()!;  
        this.siftDown(0);  
        return top;  
    }  
  
    // 上滤操作，保证父节点小于或等于子节点  
    private siftUp(index: number): void {  
        const parent = Math.floor((index - 1) / 2);  
        if (index <= 0 || this.compare(this.heap[parent], this.heap[index]) <= 0) {  
            return;  
        }  
        [this.heap[parent], this.heap[index]] = [this.heap[index], this.heap[parent]];  
        this.siftUp(parent);  
    }  
  
    // 下滤操作，保证父节点小于或等于子节点  
    private siftDown(index: number): void {  
        const length = this.heap.length;  
        let smallest = index;  
        const left = 2 * index + 1;  
        const right = 2 * index + 2;  
  
        if (left < length && this.compare(this.heap[left], this.heap[smallest]) < 0) {  
            smallest = left;  
        }  
  
        if (right < length && this.compare(this.heap[right], this.heap[smallest]) < 0) {  
            smallest = right;  
        }  
  
        if (smallest !== index) {  
            [this.heap[index], this.heap[smallest]] = [this.heap[smallest], this.heap[index]];  
            this.siftDown(smallest);  
        }  
    }  
  
    // 自定义比较函数  
    private compare(a: TrendTree, b: TrendTree): number {  
        return this.computeError(b) - this.computeError(a);  
    }  
  
    computeError(t:any){
        let count = t.timeRange[1] - t.timeRange[0] + 1;
        let start = t.timeRange[0] % 200;
        let minn = 10000;
        for(let i=start;i<start+count;i++){
            minn = Math.min(minn, this.w[i%200]);
        }
        return minn*(t.yArray[2] - t.yArray[1]);
    }

    // 获取最小元素，但不弹出  
    peek(): TrendTree | null {  
        return this.heap.length > 0 ? this.heap[0] : null;  
    }  
  
    // 获取堆的大小  
    size(): number {  
        return this.heap.length;  
    }  

    toArray(): TrendTree[] {  
        return [...this.heap]; // 返回一个浅拷贝  
    }  
}  

