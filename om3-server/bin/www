#!/usr/bin/env node

/**
 * Module dependencies.
 */

const app = require('../app');
const debug = require('debug')('express-test:server');
const http = require('http');

const {WebSocketServer} = require("ws");
const jsonpack = require("jsonpack/main");
const {Init}=require("../routes/ws_handlers");
const {unPackDataAndRouter} = require("../helper/pack_rounter")

/**
 * Get port from environment and store in Express.
 */

const port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

const server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(3000,"0.0.0.0");
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  const port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}



const wss = new WebSocketServer({
    host:"0.0.0.0",
    port:3001,
})
Init()


// const a={hello:"123"}
// const packedData=jsonpack.pack(JSON.stringify(a))
// console.log(packedData)
// const unPackData=jsonpack.unpack(packedData)
// console.log(unPackData)


wss.on("connection",function connection(ws){
    console.log("connect")
    ws.on("message",function message(data){
       unPackDataAndRouter(data.toString(),ws)
    })
})
